# üßæ Vigen√®re Cipher Code Explanation

This file explains each part of the Python script that implements a Vigen√®re Cipher.

---

## üî° Inputs

```python
text = 'mrttaqrhknsw ih puggrur'
custom_key = 'happycoding'
```
- `text`: The encrypted message to decrypt.
- `custom_key`: The key used for both encryption and decryption.

---

## üîÅ vigenere(message, key, direction=1)

This is the core function that handles both encryption and decryption.

### Parameters:
- `message`: The input message to process.
- `key`: The keyword used for shifting letters.
- `direction`: 
  - `1` for encryption (default),
  - `-1` for decryption.

### Function Logic:

```python
key_index = 0
alphabet = 'abcdefghijklmnopqrstuvwxyz'
final_message = ''
```

- `key_index`: Tracks the current position in the key.
- `alphabet`: Defines the letters used in encryption.
- `final_message`: The final encrypted or decrypted message.

### For Each Character:

```python
for char in message.lower():
```

- Converts the message to lowercase.
- Iterates through each character.

```python
if not char.isalpha():
    final_message += char
```
- If it's not a letter (like space or punctuation), keep it unchanged.

```python
key_char = key[key_index % len(key)]
key_index += 1
```
- Repeats the key as needed using modulo (`%`).

```python
offset = alphabet.index(key_char)
index = alphabet.find(char)
new_index = (index + offset * direction) % len(alphabet)
final_message += alphabet[new_index]
```
- Finds the shift amount based on the key character.
- Adjusts the index depending on encryption or decryption (`direction`).
- Wraps around the alphabet if necessary.

```python
return final_message
```
- Returns the final processed message.

---

## üîí encrypt(message, key)

```python
def encrypt(message, key):
    return vigenere(message, key)
```
- Wrapper function for encryption.

---

## üîì decrypt(message, key)

```python
def decrypt(message, key):
    return vigenere(message, key, -1)
```
- Wrapper function for decryption.

---

## üñ®Ô∏è Script Output

```python
print(f'\nEncrypted text: {text}')
print(f'Key: {custom_key}')
decryption = decrypt(text, custom_key)
print(f'\nDecrypted text: {decryption}\n')
```

- Prints the encrypted text, the key, and the result of decryption.
